

悲观锁(Pessimistic Lock), 每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，
这样别人想拿这个数据就会block(阻塞)，直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，
比如行锁、表锁、读锁、写锁等，都是在做操作之前先上锁。

乐观锁(Optimistic Lock)，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候
会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这
样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。


乐观锁应用
1.使用自增长的整数表示数据版本号。更新时检查版本号是否一致，比如数据库中数据版本为6，更新提交时
version=6+1,使用该version值(=7)与数据库version+1(=7)作比较，如果相等，则可以更新，如果不等则有
可能其他程序已更新该记录，所以返回错误。
2.使用时间戳来实现.
注: 对于以上两种方式，Hibernate自带实现方式: 在使用乐观锁的字段前加annotation: @Version, 
    Hibernate在更新时自动校验该字段。
